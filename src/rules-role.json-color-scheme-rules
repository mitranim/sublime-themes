{
  "globals": {
    "background": "var(bg)",
    "caret": "var(fg)",
    "foreground": "var(fg)",
    "invisibles": "var(invisible)",
    "line_highlight": "var(selection)",
    "selection": "var(selection)",
    "selection_border": "var(bg)",
  },
  "rules": [
    {
      "scope": "comment",
      "foreground": "var(comment_fg)",
      "background": "var(raw_bg)",
    },
    {
      "scope": "punctuation.section, punctuation.definition.interpolation, punctuation.definition.group, punctuation.separator, punctuation.terminator, variable.language.blank, variable.language.anonymous",
      "foreground": "var(comment_fg)",
    },
    {
      "scope": "entity.name - entity.name.tag, variable.parameter, variable.declaration, variable.other.constant.declaration, variable.other.readwrite.declaration, meta.declaration variable.other, meta.binding variable.other, variable.other.member.declaration",
      "foreground": "var(declaration_fg)",
      "font_style": "italic",
    },
    {
      "scope": "keyword, punctuation, variable.function, entity.name.tag, (string & constant.other.placeholder), meta.keyword, meta.variable.function",
      "foreground": "var(action_fg)",
    },
    {
      "scope": "storage, entity.other.inherited-class, punctuation.definition",
      "foreground": "var(modifier_fg)",
    },
    {
      "scope": "string",
      "background": "var(raw_bg)",
    },
    {
      "scope": "invalid",
      "foreground": "var(illegal_fg)",
    },
    {
      "scope": "constant.character.escape",
      "font_style": "bold",
    },
    {
      "scope": "constant.numeric, constant.language",
      "foreground": "var(const_fg)",
    },

    /* Markup */

    {
      "scope": "markup.raw",
      "background": "var(raw_bg)",
    },
    {
      "scope": "meta.link.inline.description",
      "background": "var(raw_bg)",
    },
    {
      "scope": "markup.underline.link",
      "background": "var(raw_bg)",
    },
    {
      "scope": "markup.italic - punctuation.definition",
      "font_style": "italic",
    },
    {
      "scope": "markup.bold - punctuation.definition",
      "font_style": "bold",
    },
    {
      "scope": "(markup.bold & markup.italic) - punctuation.definition",
      "font_style": "bold italic",
    },
    {
      // Semantically, this could be considered a "label" in the vein similar to
      // a struct field in a struct literal. If we ever allocate a color for
      // that, this rule should use it.
      "scope": "(text & constant.other.language-name)",
      "background": "var(raw_bg)",
    },
    {
      "scope": "markup.deleted, meta.header.from-file.diff",
      "foreground": "var(deleted_fg)",
    },
    {
      "scope": "markup.inserted, meta.header.to-file.diff",
      "foreground": "var(inserted_fg)",
    },
    {
      "scope": "punctuation.definition.thematic-break.markdown",
      "foreground": "var(action_fg)",
    },
    // Questionable abuse of "raw".
    {
      "scope": "meta.separator.thematic-break.markdown",
      "background": "var(raw_bg)",
    },

    /* Overrides and special cases */

    // Negate built-in magic forward fill. Must be one simple selector.
    {
      "scope": "keyword.declaration",
      "foreground": "var(action_fg)",
    },
    {
      "scope": "(source.rust & (support.function | support.macro))",
      "foreground": "var(action_fg)",
    },
    {
      "scope": "meta.import.js variable.other, meta.export.js meta.binding.name variable.other - meta.block",
      "foreground": "var(declaration_fg)",
      "font_style": "italic",
    },
    {
      "scope": "(meta.import.js | meta.export.js) & constant.other, storage.type.class.js, storage.modifier.extends.js, ((source.js | source.jsx | source.ts | source.tsx) & support.function), ((source.js | source.jsx | source.ts | source.tsx) & meta.property.object)",
      "foreground": "var(action_fg)",
    },
    {
      "scope": "(source.shell & support.function)",
      "foreground": "var(action_fg)",
    },
    {
      "scope": "source.wast & (punctuation.definition - comment)",
      "foreground": "var(comment_fg)",
    },
    {
      "scope": "(source.css | source.scss) & entity.name.tag",
      "foreground": "var(declaration_fg)",
      "font_style": "italic",
    },
  ],
}
